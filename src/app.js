const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');
const emailRoutes = require('./routes/emailRoutes');
const messageRoutes = require('./routes/messageRoutes');
const config = require('../config');

const app = express();

// ุฅุตูุงุญ ูุดููุฉ X-Forwarded-For ูู Replit
app.set('trust proxy', 1);

// CORS ุฃูุซุฑ ูุฑููุฉ ููุชุทููุฑ
app.use(cors({
    origin: function (origin, callback) {
        // ุงูุณูุงุญ ูุฌููุน ุงูุฃุตูู ุฃุซูุงุก ุงูุชุทููุฑ ุนูู Replit
        const allowedOrigins = [
            'http://localhost:3000',
            'http://127.0.0.1:3000',
            'http://localhost:3001',
            'http://127.0.0.1:3001',
            'http://localhost:3002',
            'http://127.0.0.1:3002',
            /\.repl\.co$/, // ุงูุณูุงุญ ูุฌููุน ูุทุงูุงุช Replit
            /\.repl\.it$/, // ุงูุณูุงุญ ูุฌููุน ูุทุงูุงุช Replit ุงููุฏููุฉ
            /\.replit\.com$/ // ุงูุณูุงุญ ููุทุงูุงุช Replit ุงูุฌุฏูุฏุฉ
        ];

        // ุงูุณูุงุญ ูุฌููุน ุงูุฃุตูู ูู ุจูุฆุฉ ุงูุชุทููุฑ ุฃู Replit
        if (!origin || process.env.NODE_ENV === 'development' || process.env.REPLIT_DB_URL) {
            callback(null, true);
        } else if (allowedOrigins.some(allowed => {
            if (typeof allowed === 'string') {
                return allowed === origin;
            } else if (allowed instanceof RegExp) {
                return allowed.test(origin);
            }
            return false;
        })) {
            callback(null, true);
        } else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Middleware ููุฃูุงู
app.use(helmet({
    contentSecurityPolicy: false, // ุชุนุทูู ูุคูุชุงู ููุชุทููุฑ
    crossOriginResourcePolicy: { policy: "cross-origin" }
}));

// Rate Limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 1000,
    message: {
        success: false,
        error: 'Too many requests from this IP'
    }
});
app.use(limiter);

// Body parser
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Routes
app.use('/api/email', emailRoutes);
app.use('/api/messages', messageRoutes);

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'OK', 
        message: 'ุงูุฎุงุฏู ูุนูู ุจุดูู ุทุจูุนู',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        services: {
            email: 'active',
            database: 'active'
        },
        environment: process.env.NODE_ENV || 'development',
        platform: 'Replit'
    });
});

// Test endpoint ููุชุฃูุฏ ูู ุงูุงุชุตุงู
app.get('/api/test', (req, res) => {
    res.json({ 
        success: true, 
        message: 'ุงูุงุชุตุงู ูุงุฌุญ ูุน ุงูุฎุงุฏู',
        timestamp: new Date().toISOString(),
        platform: 'HackMail Backend on Replit',
        endpoints: {
            createEmail: '/api/email/create',
            getEmails: '/api/email/session/:sessionId',
            getMessages: '/api/email/messages',
            services: '/api/email/services/status',
            health: '/health'
        }
    });
});

// Route ููุตูุญุฉ ุงูุฑุฆูุณูุฉ ุงููุนุฏูุฉ ูุชุนูู ุนูู Replit
app.get('/', (req, res) => {
    res.json({
        success: true,
        message: '๐ ูุธุงู ุงูุฅูููู ุงููุคูุช ุงูุฐูู ูุนูู ุจูุฌุงุญ ุนูู Replit',
        version: '1.0.0',
        description: 'ูุธุงู ุฅูููู ูุคูุช ุจุชุตููู ุงููุงูููุฌ ูุน ุชุจุฏูู ุชููุงุฆู ุจูู ุงูุฎุฏูุงุช',
        features: [
            'ุชุจุฏูู ุชููุงุฆู ุจูู ุฎุฏูุงุช ุงูุจุฑูุฏ',
            'ุงุณุชุจุฏุงู ุชููุงุฆู ููุญุณุงุจุงุช ุงูููุชููุฉ',
            'ุฏุนู ูุชุนุฏุฏ ููุฎุฏูุงุช (Mail.tm + GuerrillaMail)',
            'ูุธุงู ูุฑู ููุนุงูุฌุฉ ุฃุฎุทุงุก ูุญุณูุฉ',
            'ูุงุฌูุฉ ุจุฑูุฌุฉ ุชุทุจููุงุช (API) ูุชูุงููุฉ'
        ],
        endpoints: {
            api: {
                'GET /api/test': 'ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ูุน ุงูุฎุงุฏู',
                'POST /api/email/create': 'ุฅูุดุงุก ุฅูููู ูุคูุช ุฌุฏูุฏ',
                'GET /api/email/session/:sessionId': 'ุฌูุจ ุฅููููุงุช ุงูุฌูุณุฉ',
                'GET /api/email/messages': 'ุฌูุจ ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ',
                'GET /api/email/services/status': 'ุญุงูุฉ ุฎุฏูุงุช ุงูุจุฑูุฏ'
            },
            system: {
                'GET /health': 'ูุญุต ุญุงูุฉ ุงููุธุงู',
                'GET /': 'ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ (ูุฐู ุงูุตูุญุฉ)'
            }
        },
        documentation: 'ุงุณุชุฎุฏู /health ููุชุญูู ูู ุญุงูุฉ ุงููุธุงู ุฃู /api/test ูุงุฎุชุจุงุฑ ุงูุงุชุตุงู'
    });
});

// Error handling
app.use((err, req, res, next) => {
    console.error('โ ุฎุทุฃ ูู ุงูุฎุงุฏู:', err);

    // ุฅุฐุง ูุงู ุฎุทุฃ CORS
    if (err.message.includes('CORS')) {
        return res.status(403).json({ 
            success: false,
            error: 'ุทูุจ ูุฑููุถ ุจุณุจุจ ุณูุงุณุฉ CORS',
            message: 'ูุฑุฌู ุงุณุชุฎุฏุงู ูุทุงู ูุณููุญ ุจู',
            allowedOrigins: [
                'http://localhost:3000',
                'http://localhost:3001',
                'http://localhost:3002',
                'ุฌููุน ูุทุงูุงุช Replit'
            ]
        });
    }

    res.status(500).json({ 
        success: false,
        error: 'ุญุฏุซ ุฎุทุฃ ุฏุงุฎูู ูู ุงูุฎุงุฏู',
        message: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error',
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    });
});

// 404 handler ููู API
app.use('/api/*', (req, res) => {
    res.status(404).json({ 
        success: false,
        error: 'ุงูุตูุญุฉ ุบูุฑ ููุฌูุฏุฉ',
        path: req.originalUrl,
        availableEndpoints: {
            email: {
                'POST /api/email/create': 'ุฅูุดุงุก ุฅูููู ุฌุฏูุฏ',
                'GET /api/email/session/:sessionId': 'ุฌูุจ ุฅููููุงุช ุงูุฌูุณุฉ',
                'DELETE /api/email/:email': 'ุญุฐู ุฅูููู',
                'GET /api/email/messages': 'ุฌูุจ ุงูุฑุณุงุฆู',
                'GET /api/email/messages/:id': 'ุฌูุจ ุฑุณุงูุฉ ูุญุฏุฏุฉ',
                'GET /api/email/services/status': 'ุญุงูุฉ ุงูุฎุฏูุงุช',
                'GET /api/email/services/available': 'ุงูุฎุฏูุงุช ุงููุชุงุญุฉ',
                'POST /api/email/services/rotate': 'ุชุจุฏูู ุงูุฎุฏูุฉ',
                'POST /api/email/services/reset': 'ุฅุนุงุฏุฉ ุชุนููู ุงูุฎุฏูุงุช',
                'POST /api/email/auto-replace': 'ุงุณุชุจุฏุงู ุชููุงุฆู ููุญุณุงุจ ุงูููุชูู'
            },
            system: {
                'GET /health': 'ุญุงูุฉ ุงูุฎุงุฏู',
                'GET /api/test': 'ุงุฎุชุจุงุฑ ุงูุงุชุตุงู',
                'GET /': 'ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ'
            }
        }
    });
});

// 404 handler ุนุงู
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'ุงูุตูุญุฉ ุบูุฑ ููุฌูุฏุฉ',
        message: 'ุงุณุชุฎุฏู / ููุตูุญุฉ ุงูุฑุฆูุณูุฉ ุฃู /health ููุชุญูู ูู ุญุงูุฉ ุงููุธุงู',
        path: req.originalUrl
    });
});

module.exports = app;